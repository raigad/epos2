import { Prisma as BasePrisma, BasePrismaOptions } from 'prisma-binding'
import { GraphQLResolveInfo } from 'graphql'

const typeDefs = `
# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Category implements Node {
  id: ID!
  name: String!
  ingredients(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient!]
}

type Customer implements Node {
  id: ID!
  first: String!
  last: String!
  street: String
  city: String
  state: String
  zip: String
  cardNum: String
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
}

type Ingredient implements Node {
  id: ID!
  name: String!
  category(where: CategoryWhereInput): Category!
  qty: Int!
}

type LineItem implements Node {
  id: ID!
  order(where: OrderWhereInput): Order
  product(where: ProductWhereInput): Product
  purchasePrice: Int!
}

type Order implements Node {
  id: ID!
  customer(where: CustomerWhereInput): Customer
  lineItems(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LineItem!]
}

type Post implements Node {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
}

type Product implements Node {
  id: ID!
  lineItems(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LineItem!]
  price: Int!
  name: String!
  ingredients(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient!]
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}


#
# Other Types
#

type AggregateCategory {
  count: Int!
}

type AggregateCustomer {
  count: Int!
}

type AggregateIngredient {
  count: Int!
}

type AggregateLineItem {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  name: String!
  ingredients: IngredientCreateManyWithoutCategoryInput
}

input CategoryCreateOneWithoutIngredientsInput {
  create: CategoryCreateWithoutIngredientsInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutIngredientsInput {
  name: String!
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CategoryPreviousValues {
  id: ID!
  name: String!
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  AND: [CategorySubscriptionWhereInput!]
  OR: [CategorySubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
}

input CategoryUpdateInput {
  name: String
  ingredients: IngredientUpdateManyWithoutCategoryInput
}

input CategoryUpdateOneWithoutIngredientsInput {
  create: CategoryCreateWithoutIngredientsInput
  connect: CategoryWhereUniqueInput
  disconnect: CategoryWhereUniqueInput
  delete: CategoryWhereUniqueInput
  update: CategoryUpdateWithoutIngredientsInput
  upsert: CategoryUpsertWithoutIngredientsInput
}

input CategoryUpdateWithoutIngredientsDataInput {
  name: String
}

input CategoryUpdateWithoutIngredientsInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateWithoutIngredientsDataInput!
}

input CategoryUpsertWithoutIngredientsInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateWithoutIngredientsDataInput!
  create: CategoryCreateWithoutIngredientsInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  ingredients_every: IngredientWhereInput
  ingredients_some: IngredientWhereInput
  ingredients_none: IngredientWhereInput
}

input CategoryWhereUniqueInput {
  id: ID
}

type CustomerConnection {
  pageInfo: PageInfo!
  edges: [CustomerEdge]!
  aggregate: AggregateCustomer!
}

input CustomerCreateInput {
  first: String!
  last: String!
  street: String
  city: String
  state: String
  zip: String
  cardNum: String
  orders: OrderCreateManyWithoutCustomerInput
}

input CustomerCreateOneWithoutOrdersInput {
  create: CustomerCreateWithoutOrdersInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutOrdersInput {
  first: String!
  last: String!
  street: String
  city: String
  state: String
  zip: String
  cardNum: String
}

type CustomerEdge {
  node: Customer!
  cursor: String!
}

enum CustomerOrderByInput {
  id_ASC
  id_DESC
  first_ASC
  first_DESC
  last_ASC
  last_DESC
  street_ASC
  street_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zip_ASC
  zip_DESC
  cardNum_ASC
  cardNum_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CustomerPreviousValues {
  id: ID!
  first: String!
  last: String!
  street: String
  city: String
  state: String
  zip: String
  cardNum: String
}

type CustomerSubscriptionPayload {
  mutation: MutationType!
  node: Customer
  updatedFields: [String!]
  previousValues: CustomerPreviousValues
}

input CustomerSubscriptionWhereInput {
  AND: [CustomerSubscriptionWhereInput!]
  OR: [CustomerSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CustomerWhereInput
}

input CustomerUpdateInput {
  first: String
  last: String
  street: String
  city: String
  state: String
  zip: String
  cardNum: String
  orders: OrderUpdateManyWithoutCustomerInput
}

input CustomerUpdateOneWithoutOrdersInput {
  create: CustomerCreateWithoutOrdersInput
  connect: CustomerWhereUniqueInput
  disconnect: CustomerWhereUniqueInput
  delete: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutOrdersInput
  upsert: CustomerUpsertWithoutOrdersInput
}

input CustomerUpdateWithoutOrdersDataInput {
  first: String
  last: String
  street: String
  city: String
  state: String
  zip: String
  cardNum: String
}

input CustomerUpdateWithoutOrdersInput {
  where: CustomerWhereUniqueInput!
  data: CustomerUpdateWithoutOrdersDataInput!
}

input CustomerUpsertWithoutOrdersInput {
  where: CustomerWhereUniqueInput!
  update: CustomerUpdateWithoutOrdersDataInput!
  create: CustomerCreateWithoutOrdersInput!
}

input CustomerWhereInput {
  AND: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  first: String
  first_not: String
  first_in: [String!]
  first_not_in: [String!]
  first_lt: String
  first_lte: String
  first_gt: String
  first_gte: String
  first_contains: String
  first_not_contains: String
  first_starts_with: String
  first_not_starts_with: String
  first_ends_with: String
  first_not_ends_with: String
  last: String
  last_not: String
  last_in: [String!]
  last_not_in: [String!]
  last_lt: String
  last_lte: String
  last_gt: String
  last_gte: String
  last_contains: String
  last_not_contains: String
  last_starts_with: String
  last_not_starts_with: String
  last_ends_with: String
  last_not_ends_with: String
  street: String
  street_not: String
  street_in: [String!]
  street_not_in: [String!]
  street_lt: String
  street_lte: String
  street_gt: String
  street_gte: String
  street_contains: String
  street_not_contains: String
  street_starts_with: String
  street_not_starts_with: String
  street_ends_with: String
  street_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  zip: String
  zip_not: String
  zip_in: [String!]
  zip_not_in: [String!]
  zip_lt: String
  zip_lte: String
  zip_gt: String
  zip_gte: String
  zip_contains: String
  zip_not_contains: String
  zip_starts_with: String
  zip_not_starts_with: String
  zip_ends_with: String
  zip_not_ends_with: String
  cardNum: String
  cardNum_not: String
  cardNum_in: [String!]
  cardNum_not_in: [String!]
  cardNum_lt: String
  cardNum_lte: String
  cardNum_gt: String
  cardNum_gte: String
  cardNum_contains: String
  cardNum_not_contains: String
  cardNum_starts_with: String
  cardNum_not_starts_with: String
  cardNum_ends_with: String
  cardNum_not_ends_with: String
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
}

input CustomerWhereUniqueInput {
  id: ID
}

type IngredientConnection {
  pageInfo: PageInfo!
  edges: [IngredientEdge]!
  aggregate: AggregateIngredient!
}

input IngredientCreateInput {
  name: String!
  qty: Int!
  category: CategoryCreateOneWithoutIngredientsInput!
}

input IngredientCreateManyInput {
  create: [IngredientCreateInput!]
  connect: [IngredientWhereUniqueInput!]
}

input IngredientCreateManyWithoutCategoryInput {
  create: [IngredientCreateWithoutCategoryInput!]
  connect: [IngredientWhereUniqueInput!]
}

input IngredientCreateWithoutCategoryInput {
  name: String!
  qty: Int!
}

type IngredientEdge {
  node: Ingredient!
  cursor: String!
}

enum IngredientOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  qty_ASC
  qty_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type IngredientPreviousValues {
  id: ID!
  name: String!
  qty: Int!
}

type IngredientSubscriptionPayload {
  mutation: MutationType!
  node: Ingredient
  updatedFields: [String!]
  previousValues: IngredientPreviousValues
}

input IngredientSubscriptionWhereInput {
  AND: [IngredientSubscriptionWhereInput!]
  OR: [IngredientSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IngredientWhereInput
}

input IngredientUpdateInput {
  name: String
  qty: Int
  category: CategoryUpdateOneWithoutIngredientsInput
}

input IngredientUpdateManyInput {
  create: [IngredientCreateInput!]
  connect: [IngredientWhereUniqueInput!]
  disconnect: [IngredientWhereUniqueInput!]
  delete: [IngredientWhereUniqueInput!]
}

input IngredientUpdateManyWithoutCategoryInput {
  create: [IngredientCreateWithoutCategoryInput!]
  connect: [IngredientWhereUniqueInput!]
  disconnect: [IngredientWhereUniqueInput!]
  delete: [IngredientWhereUniqueInput!]
  update: [IngredientUpdateWithoutCategoryInput!]
  upsert: [IngredientUpsertWithoutCategoryInput!]
}

input IngredientUpdateWithoutCategoryDataInput {
  name: String
  qty: Int
}

input IngredientUpdateWithoutCategoryInput {
  where: IngredientWhereUniqueInput!
  data: IngredientUpdateWithoutCategoryDataInput!
}

input IngredientUpsertWithoutCategoryInput {
  where: IngredientWhereUniqueInput!
  update: IngredientUpdateWithoutCategoryDataInput!
  create: IngredientCreateWithoutCategoryInput!
}

input IngredientWhereInput {
  AND: [IngredientWhereInput!]
  OR: [IngredientWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  qty: Int
  qty_not: Int
  qty_in: [Int!]
  qty_not_in: [Int!]
  qty_lt: Int
  qty_lte: Int
  qty_gt: Int
  qty_gte: Int
  category: CategoryWhereInput
}

input IngredientWhereUniqueInput {
  id: ID
}

type LineItemConnection {
  pageInfo: PageInfo!
  edges: [LineItemEdge]!
  aggregate: AggregateLineItem!
}

input LineItemCreateInput {
  purchasePrice: Int!
  order: OrderCreateOneWithoutLineItemsInput
  product: ProductCreateOneWithoutLineItemsInput
}

input LineItemCreateManyWithoutOrderInput {
  create: [LineItemCreateWithoutOrderInput!]
  connect: [LineItemWhereUniqueInput!]
}

input LineItemCreateManyWithoutProductInput {
  create: [LineItemCreateWithoutProductInput!]
  connect: [LineItemWhereUniqueInput!]
}

input LineItemCreateWithoutOrderInput {
  purchasePrice: Int!
  product: ProductCreateOneWithoutLineItemsInput
}

input LineItemCreateWithoutProductInput {
  purchasePrice: Int!
  order: OrderCreateOneWithoutLineItemsInput
}

type LineItemEdge {
  node: LineItem!
  cursor: String!
}

enum LineItemOrderByInput {
  id_ASC
  id_DESC
  purchasePrice_ASC
  purchasePrice_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LineItemPreviousValues {
  id: ID!
  purchasePrice: Int!
}

type LineItemSubscriptionPayload {
  mutation: MutationType!
  node: LineItem
  updatedFields: [String!]
  previousValues: LineItemPreviousValues
}

input LineItemSubscriptionWhereInput {
  AND: [LineItemSubscriptionWhereInput!]
  OR: [LineItemSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LineItemWhereInput
}

input LineItemUpdateInput {
  purchasePrice: Int
  order: OrderUpdateOneWithoutLineItemsInput
  product: ProductUpdateOneWithoutLineItemsInput
}

input LineItemUpdateManyWithoutOrderInput {
  create: [LineItemCreateWithoutOrderInput!]
  connect: [LineItemWhereUniqueInput!]
  disconnect: [LineItemWhereUniqueInput!]
  delete: [LineItemWhereUniqueInput!]
  update: [LineItemUpdateWithoutOrderInput!]
  upsert: [LineItemUpsertWithoutOrderInput!]
}

input LineItemUpdateManyWithoutProductInput {
  create: [LineItemCreateWithoutProductInput!]
  connect: [LineItemWhereUniqueInput!]
  disconnect: [LineItemWhereUniqueInput!]
  delete: [LineItemWhereUniqueInput!]
  update: [LineItemUpdateWithoutProductInput!]
  upsert: [LineItemUpsertWithoutProductInput!]
}

input LineItemUpdateWithoutOrderDataInput {
  purchasePrice: Int
  product: ProductUpdateOneWithoutLineItemsInput
}

input LineItemUpdateWithoutOrderInput {
  where: LineItemWhereUniqueInput!
  data: LineItemUpdateWithoutOrderDataInput!
}

input LineItemUpdateWithoutProductDataInput {
  purchasePrice: Int
  order: OrderUpdateOneWithoutLineItemsInput
}

input LineItemUpdateWithoutProductInput {
  where: LineItemWhereUniqueInput!
  data: LineItemUpdateWithoutProductDataInput!
}

input LineItemUpsertWithoutOrderInput {
  where: LineItemWhereUniqueInput!
  update: LineItemUpdateWithoutOrderDataInput!
  create: LineItemCreateWithoutOrderInput!
}

input LineItemUpsertWithoutProductInput {
  where: LineItemWhereUniqueInput!
  update: LineItemUpdateWithoutProductDataInput!
  create: LineItemCreateWithoutProductInput!
}

input LineItemWhereInput {
  AND: [LineItemWhereInput!]
  OR: [LineItemWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  purchasePrice: Int
  purchasePrice_not: Int
  purchasePrice_in: [Int!]
  purchasePrice_not_in: [Int!]
  purchasePrice_lt: Int
  purchasePrice_lte: Int
  purchasePrice_gt: Int
  purchasePrice_gte: Int
  order: OrderWhereInput
  product: ProductWhereInput
}

input LineItemWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createUser(data: UserCreateInput!): User!
  createCustomer(data: CustomerCreateInput!): Customer!
  createOrder(data: OrderCreateInput!): Order!
  createLineItem(data: LineItemCreateInput!): LineItem!
  createProduct(data: ProductCreateInput!): Product!
  createIngredient(data: IngredientCreateInput!): Ingredient!
  createCategory(data: CategoryCreateInput!): Category!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateLineItem(data: LineItemUpdateInput!, where: LineItemWhereUniqueInput!): LineItem
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateIngredient(data: IngredientUpdateInput!, where: IngredientWhereUniqueInput!): Ingredient
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  deletePost(where: PostWhereUniqueInput!): Post
  deleteUser(where: UserWhereUniqueInput!): User
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteLineItem(where: LineItemWhereUniqueInput!): LineItem
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteIngredient(where: IngredientWhereUniqueInput!): Ingredient
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertCustomer(where: CustomerWhereUniqueInput!, create: CustomerCreateInput!, update: CustomerUpdateInput!): Customer!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  upsertLineItem(where: LineItemWhereUniqueInput!, create: LineItemCreateInput!, update: LineItemUpdateInput!): LineItem!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  upsertIngredient(where: IngredientWhereUniqueInput!, create: IngredientCreateInput!, update: IngredientUpdateInput!): Ingredient!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyCustomers(data: CustomerUpdateInput!, where: CustomerWhereInput!): BatchPayload!
  updateManyOrders(data: OrderUpdateInput!, where: OrderWhereInput!): BatchPayload!
  updateManyLineItems(data: LineItemUpdateInput!, where: LineItemWhereInput!): BatchPayload!
  updateManyProducts(data: ProductUpdateInput!, where: ProductWhereInput!): BatchPayload!
  updateManyIngredients(data: IngredientUpdateInput!, where: IngredientWhereInput!): BatchPayload!
  updateManyCategories(data: CategoryUpdateInput!, where: CategoryWhereInput!): BatchPayload!
  deleteManyPosts(where: PostWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyCustomers(where: CustomerWhereInput!): BatchPayload!
  deleteManyOrders(where: OrderWhereInput!): BatchPayload!
  deleteManyLineItems(where: LineItemWhereInput!): BatchPayload!
  deleteManyProducts(where: ProductWhereInput!): BatchPayload!
  deleteManyIngredients(where: IngredientWhereInput!): BatchPayload!
  deleteManyCategories(where: CategoryWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type OrderConnection {
  pageInfo: PageInfo!
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  customer: CustomerCreateOneWithoutOrdersInput
  lineItems: LineItemCreateManyWithoutOrderInput
}

input OrderCreateManyWithoutCustomerInput {
  create: [OrderCreateWithoutCustomerInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateOneWithoutLineItemsInput {
  create: OrderCreateWithoutLineItemsInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutCustomerInput {
  lineItems: LineItemCreateManyWithoutOrderInput
}

input OrderCreateWithoutLineItemsInput {
  customer: CustomerCreateOneWithoutOrdersInput
}

type OrderEdge {
  node: Order!
  cursor: String!
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrderPreviousValues {
  id: ID!
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  AND: [OrderSubscriptionWhereInput!]
  OR: [OrderSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
}

input OrderUpdateInput {
  customer: CustomerUpdateOneWithoutOrdersInput
  lineItems: LineItemUpdateManyWithoutOrderInput
}

input OrderUpdateManyWithoutCustomerInput {
  create: [OrderCreateWithoutCustomerInput!]
  connect: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithoutCustomerInput!]
  upsert: [OrderUpsertWithoutCustomerInput!]
}

input OrderUpdateOneWithoutLineItemsInput {
  create: OrderCreateWithoutLineItemsInput
  connect: OrderWhereUniqueInput
  disconnect: OrderWhereUniqueInput
  delete: OrderWhereUniqueInput
  update: OrderUpdateWithoutLineItemsInput
  upsert: OrderUpsertWithoutLineItemsInput
}

input OrderUpdateWithoutCustomerDataInput {
  lineItems: LineItemUpdateManyWithoutOrderInput
}

input OrderUpdateWithoutCustomerInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutCustomerDataInput!
}

input OrderUpdateWithoutLineItemsDataInput {
  customer: CustomerUpdateOneWithoutOrdersInput
}

input OrderUpdateWithoutLineItemsInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutLineItemsDataInput!
}

input OrderUpsertWithoutCustomerInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutCustomerDataInput!
  create: OrderCreateWithoutCustomerInput!
}

input OrderUpsertWithoutLineItemsInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutLineItemsDataInput!
  create: OrderCreateWithoutLineItemsInput!
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  customer: CustomerWhereInput
  lineItems_every: LineItemWhereInput
  lineItems_some: LineItemWhereInput
  lineItems_none: LineItemWhereInput
}

input OrderWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
}

input PostCreateManyInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
}

input PostUpdateManyInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  isPublished: Boolean
  isPublished_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
}

input PostWhereUniqueInput {
  id: ID
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  price: Int!
  name: String!
  lineItems: LineItemCreateManyWithoutProductInput
  ingredients: IngredientCreateManyInput
}

input ProductCreateOneWithoutLineItemsInput {
  create: ProductCreateWithoutLineItemsInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutLineItemsInput {
  price: Int!
  name: String!
  ingredients: IngredientCreateManyInput
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  price_ASC
  price_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProductPreviousValues {
  id: ID!
  price: Int!
  name: String!
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
}

input ProductUpdateInput {
  price: Int
  name: String
  lineItems: LineItemUpdateManyWithoutProductInput
  ingredients: IngredientUpdateManyInput
}

input ProductUpdateOneWithoutLineItemsInput {
  create: ProductCreateWithoutLineItemsInput
  connect: ProductWhereUniqueInput
  disconnect: ProductWhereUniqueInput
  delete: ProductWhereUniqueInput
  update: ProductUpdateWithoutLineItemsInput
  upsert: ProductUpsertWithoutLineItemsInput
}

input ProductUpdateWithoutLineItemsDataInput {
  price: Int
  name: String
  ingredients: IngredientUpdateManyInput
}

input ProductUpdateWithoutLineItemsInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutLineItemsDataInput!
}

input ProductUpsertWithoutLineItemsInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutLineItemsDataInput!
  create: ProductCreateWithoutLineItemsInput!
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  lineItems_every: LineItemWhereInput
  lineItems_some: LineItemWhereInput
  lineItems_none: LineItemWhereInput
  ingredients_every: IngredientWhereInput
  ingredients_some: IngredientWhereInput
  ingredients_none: IngredientWhereInput
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  customers(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Customer]!
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  lineItems(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LineItem]!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  ingredients(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient]!
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  post(where: PostWhereUniqueInput!): Post
  user(where: UserWhereUniqueInput!): User
  customer(where: CustomerWhereUniqueInput!): Customer
  order(where: OrderWhereUniqueInput!): Order
  lineItem(where: LineItemWhereUniqueInput!): LineItem
  product(where: ProductWhereUniqueInput!): Product
  ingredient(where: IngredientWhereUniqueInput!): Ingredient
  category(where: CategoryWhereUniqueInput!): Category
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  customersConnection(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomerConnection!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  lineItemsConnection(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LineItemConnection!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  ingredientsConnection(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IngredientConnection!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  node(id: ID!): Node
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  customer(where: CustomerSubscriptionWhereInput): CustomerSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  lineItem(where: LineItemSubscriptionWhereInput): LineItemSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  ingredient(where: IngredientSubscriptionWhereInput): IngredientSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  posts: PostCreateManyInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  posts: PostUpdateManyInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`

export type CustomerOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'first_ASC' |
  'first_DESC' |
  'last_ASC' |
  'last_DESC' |
  'street_ASC' |
  'street_DESC' |
  'city_ASC' |
  'city_DESC' |
  'state_ASC' |
  'state_DESC' |
  'zip_ASC' |
  'zip_DESC' |
  'cardNum_ASC' |
  'cardNum_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type UserOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'email_ASC' |
  'email_DESC' |
  'password_ASC' |
  'password_DESC' |
  'name_ASC' |
  'name_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type OrderOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type LineItemOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'purchasePrice_ASC' |
  'purchasePrice_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type IngredientOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'name_ASC' |
  'name_DESC' |
  'qty_ASC' |
  'qty_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type ProductOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'price_ASC' |
  'price_DESC' |
  'name_ASC' |
  'name_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type PostOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'isPublished_ASC' |
  'isPublished_DESC' |
  'title_ASC' |
  'title_DESC' |
  'text_ASC' |
  'text_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type CategoryOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'name_ASC' |
  'name_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type MutationType = 
  'CREATED' |
  'UPDATED' |
  'DELETED'

export interface CustomerCreateWithoutOrdersInput {
  first: String
  last: String
  street?: String
  city?: String
  state?: String
  zip?: String
  cardNum?: String
}

export interface PostWhereInput {
  AND?: PostWhereInput[] | PostWhereInput
  OR?: PostWhereInput[] | PostWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  isPublished?: Boolean
  isPublished_not?: Boolean
  title?: String
  title_not?: String
  title_in?: String[] | String
  title_not_in?: String[] | String
  title_lt?: String
  title_lte?: String
  title_gt?: String
  title_gte?: String
  title_contains?: String
  title_not_contains?: String
  title_starts_with?: String
  title_not_starts_with?: String
  title_ends_with?: String
  title_not_ends_with?: String
  text?: String
  text_not?: String
  text_in?: String[] | String
  text_not_in?: String[] | String
  text_lt?: String
  text_lte?: String
  text_gt?: String
  text_gte?: String
  text_contains?: String
  text_not_contains?: String
  text_starts_with?: String
  text_not_starts_with?: String
  text_ends_with?: String
  text_not_ends_with?: String
}

export interface LineItemCreateWithoutProductInput {
  purchasePrice: Int
  order?: OrderCreateOneWithoutLineItemsInput
}

export interface CustomerWhereInput {
  AND?: CustomerWhereInput[] | CustomerWhereInput
  OR?: CustomerWhereInput[] | CustomerWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  first?: String
  first_not?: String
  first_in?: String[] | String
  first_not_in?: String[] | String
  first_lt?: String
  first_lte?: String
  first_gt?: String
  first_gte?: String
  first_contains?: String
  first_not_contains?: String
  first_starts_with?: String
  first_not_starts_with?: String
  first_ends_with?: String
  first_not_ends_with?: String
  last?: String
  last_not?: String
  last_in?: String[] | String
  last_not_in?: String[] | String
  last_lt?: String
  last_lte?: String
  last_gt?: String
  last_gte?: String
  last_contains?: String
  last_not_contains?: String
  last_starts_with?: String
  last_not_starts_with?: String
  last_ends_with?: String
  last_not_ends_with?: String
  street?: String
  street_not?: String
  street_in?: String[] | String
  street_not_in?: String[] | String
  street_lt?: String
  street_lte?: String
  street_gt?: String
  street_gte?: String
  street_contains?: String
  street_not_contains?: String
  street_starts_with?: String
  street_not_starts_with?: String
  street_ends_with?: String
  street_not_ends_with?: String
  city?: String
  city_not?: String
  city_in?: String[] | String
  city_not_in?: String[] | String
  city_lt?: String
  city_lte?: String
  city_gt?: String
  city_gte?: String
  city_contains?: String
  city_not_contains?: String
  city_starts_with?: String
  city_not_starts_with?: String
  city_ends_with?: String
  city_not_ends_with?: String
  state?: String
  state_not?: String
  state_in?: String[] | String
  state_not_in?: String[] | String
  state_lt?: String
  state_lte?: String
  state_gt?: String
  state_gte?: String
  state_contains?: String
  state_not_contains?: String
  state_starts_with?: String
  state_not_starts_with?: String
  state_ends_with?: String
  state_not_ends_with?: String
  zip?: String
  zip_not?: String
  zip_in?: String[] | String
  zip_not_in?: String[] | String
  zip_lt?: String
  zip_lte?: String
  zip_gt?: String
  zip_gte?: String
  zip_contains?: String
  zip_not_contains?: String
  zip_starts_with?: String
  zip_not_starts_with?: String
  zip_ends_with?: String
  zip_not_ends_with?: String
  cardNum?: String
  cardNum_not?: String
  cardNum_in?: String[] | String
  cardNum_not_in?: String[] | String
  cardNum_lt?: String
  cardNum_lte?: String
  cardNum_gt?: String
  cardNum_gte?: String
  cardNum_contains?: String
  cardNum_not_contains?: String
  cardNum_starts_with?: String
  cardNum_not_starts_with?: String
  cardNum_ends_with?: String
  cardNum_not_ends_with?: String
  orders_every?: OrderWhereInput
  orders_some?: OrderWhereInput
  orders_none?: OrderWhereInput
}

export interface CategoryCreateInput {
  name: String
  ingredients?: IngredientCreateManyWithoutCategoryInput
}

export interface LineItemWhereInput {
  AND?: LineItemWhereInput[] | LineItemWhereInput
  OR?: LineItemWhereInput[] | LineItemWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  purchasePrice?: Int
  purchasePrice_not?: Int
  purchasePrice_in?: Int[] | Int
  purchasePrice_not_in?: Int[] | Int
  purchasePrice_lt?: Int
  purchasePrice_lte?: Int
  purchasePrice_gt?: Int
  purchasePrice_gte?: Int
  order?: OrderWhereInput
  product?: ProductWhereInput
}

export interface IngredientCreateManyWithoutCategoryInput {
  create?: IngredientCreateWithoutCategoryInput[] | IngredientCreateWithoutCategoryInput
  connect?: IngredientWhereUniqueInput[] | IngredientWhereUniqueInput
}

export interface IngredientWhereInput {
  AND?: IngredientWhereInput[] | IngredientWhereInput
  OR?: IngredientWhereInput[] | IngredientWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  qty?: Int
  qty_not?: Int
  qty_in?: Int[] | Int
  qty_not_in?: Int[] | Int
  qty_lt?: Int
  qty_lte?: Int
  qty_gt?: Int
  qty_gte?: Int
  category?: CategoryWhereInput
}

export interface CustomerUpdateOneWithoutOrdersInput {
  create?: CustomerCreateWithoutOrdersInput
  connect?: CustomerWhereUniqueInput
  disconnect?: CustomerWhereUniqueInput
  delete?: CustomerWhereUniqueInput
  update?: CustomerUpdateWithoutOrdersInput
  upsert?: CustomerUpsertWithoutOrdersInput
}

export interface ProductUpsertWithoutLineItemsInput {
  where: ProductWhereUniqueInput
  update: ProductUpdateWithoutLineItemsDataInput
  create: ProductCreateWithoutLineItemsInput
}

export interface OrderUpdateInput {
  customer?: CustomerUpdateOneWithoutOrdersInput
  lineItems?: LineItemUpdateManyWithoutOrderInput
}

export interface IngredientCreateWithoutCategoryInput {
  name: String
  qty: Int
}

export interface PostCreateInput {
  isPublished?: Boolean
  title: String
  text: String
}

export interface CategorySubscriptionWhereInput {
  AND?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  OR?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: CategoryWhereInput
}

export interface UserCreateInput {
  email: String
  password: String
  name: String
  posts?: PostCreateManyInput
}

export interface IngredientSubscriptionWhereInput {
  AND?: IngredientSubscriptionWhereInput[] | IngredientSubscriptionWhereInput
  OR?: IngredientSubscriptionWhereInput[] | IngredientSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: IngredientWhereInput
}

export interface PostCreateManyInput {
  create?: PostCreateInput[] | PostCreateInput
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput
}

export interface LineItemSubscriptionWhereInput {
  AND?: LineItemSubscriptionWhereInput[] | LineItemSubscriptionWhereInput
  OR?: LineItemSubscriptionWhereInput[] | LineItemSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: LineItemWhereInput
}

export interface CustomerCreateInput {
  first: String
  last: String
  street?: String
  city?: String
  state?: String
  zip?: String
  cardNum?: String
  orders?: OrderCreateManyWithoutCustomerInput
}

export interface CustomerSubscriptionWhereInput {
  AND?: CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput
  OR?: CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: CustomerWhereInput
}

export interface OrderCreateManyWithoutCustomerInput {
  create?: OrderCreateWithoutCustomerInput[] | OrderCreateWithoutCustomerInput
  connect?: OrderWhereUniqueInput[] | OrderWhereUniqueInput
}

export interface PostSubscriptionWhereInput {
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: PostWhereInput
}

export interface OrderCreateWithoutCustomerInput {
  lineItems?: LineItemCreateManyWithoutOrderInput
}

export interface UserWhereUniqueInput {
  id?: ID_Input
  email?: String
}

export interface LineItemCreateManyWithoutOrderInput {
  create?: LineItemCreateWithoutOrderInput[] | LineItemCreateWithoutOrderInput
  connect?: LineItemWhereUniqueInput[] | LineItemWhereUniqueInput
}

export interface OrderWhereUniqueInput {
  id?: ID_Input
}

export interface LineItemCreateWithoutOrderInput {
  purchasePrice: Int
  product?: ProductCreateOneWithoutLineItemsInput
}

export interface ProductWhereUniqueInput {
  id?: ID_Input
}

export interface ProductCreateOneWithoutLineItemsInput {
  create?: ProductCreateWithoutLineItemsInput
  connect?: ProductWhereUniqueInput
}

export interface CategoryWhereUniqueInput {
  id?: ID_Input
}

export interface ProductCreateWithoutLineItemsInput {
  price: Int
  name: String
  ingredients?: IngredientCreateManyInput
}

export interface IngredientUpdateWithoutCategoryDataInput {
  name?: String
  qty?: Int
}

export interface IngredientCreateManyInput {
  create?: IngredientCreateInput[] | IngredientCreateInput
  connect?: IngredientWhereUniqueInput[] | IngredientWhereUniqueInput
}

export interface IngredientUpdateManyWithoutCategoryInput {
  create?: IngredientCreateWithoutCategoryInput[] | IngredientCreateWithoutCategoryInput
  connect?: IngredientWhereUniqueInput[] | IngredientWhereUniqueInput
  disconnect?: IngredientWhereUniqueInput[] | IngredientWhereUniqueInput
  delete?: IngredientWhereUniqueInput[] | IngredientWhereUniqueInput
  update?: IngredientUpdateWithoutCategoryInput[] | IngredientUpdateWithoutCategoryInput
  upsert?: IngredientUpsertWithoutCategoryInput[] | IngredientUpsertWithoutCategoryInput
}

export interface IngredientCreateInput {
  name: String
  qty: Int
  category: CategoryCreateOneWithoutIngredientsInput
}

export interface CategoryUpsertWithoutIngredientsInput {
  where: CategoryWhereUniqueInput
  update: CategoryUpdateWithoutIngredientsDataInput
  create: CategoryCreateWithoutIngredientsInput
}

export interface CategoryCreateOneWithoutIngredientsInput {
  create?: CategoryCreateWithoutIngredientsInput
  connect?: CategoryWhereUniqueInput
}

export interface CategoryUpdateWithoutIngredientsInput {
  where: CategoryWhereUniqueInput
  data: CategoryUpdateWithoutIngredientsDataInput
}

export interface CategoryCreateWithoutIngredientsInput {
  name: String
}

export interface IngredientUpdateInput {
  name?: String
  qty?: Int
  category?: CategoryUpdateOneWithoutIngredientsInput
}

export interface OrderCreateInput {
  customer?: CustomerCreateOneWithoutOrdersInput
  lineItems?: LineItemCreateManyWithoutOrderInput
}

export interface LineItemUpdateWithoutProductDataInput {
  purchasePrice?: Int
  order?: OrderUpdateOneWithoutLineItemsInput
}

export interface CustomerCreateOneWithoutOrdersInput {
  create?: CustomerCreateWithoutOrdersInput
  connect?: CustomerWhereUniqueInput
}

export interface LineItemUpdateManyWithoutProductInput {
  create?: LineItemCreateWithoutProductInput[] | LineItemCreateWithoutProductInput
  connect?: LineItemWhereUniqueInput[] | LineItemWhereUniqueInput
  disconnect?: LineItemWhereUniqueInput[] | LineItemWhereUniqueInput
  delete?: LineItemWhereUniqueInput[] | LineItemWhereUniqueInput
  update?: LineItemUpdateWithoutProductInput[] | LineItemUpdateWithoutProductInput
  upsert?: LineItemUpsertWithoutProductInput[] | LineItemUpsertWithoutProductInput
}

export interface OrderUpsertWithoutCustomerInput {
  where: OrderWhereUniqueInput
  update: OrderUpdateWithoutCustomerDataInput
  create: OrderCreateWithoutCustomerInput
}

export interface OrderUpsertWithoutLineItemsInput {
  where: OrderWhereUniqueInput
  update: OrderUpdateWithoutLineItemsDataInput
  create: OrderCreateWithoutLineItemsInput
}

export interface LineItemCreateInput {
  purchasePrice: Int
  order?: OrderCreateOneWithoutLineItemsInput
  product?: ProductCreateOneWithoutLineItemsInput
}

export interface OrderUpdateWithoutLineItemsInput {
  where: OrderWhereUniqueInput
  data: OrderUpdateWithoutLineItemsDataInput
}

export interface OrderCreateOneWithoutLineItemsInput {
  create?: OrderCreateWithoutLineItemsInput
  connect?: OrderWhereUniqueInput
}

export interface LineItemUpdateInput {
  purchasePrice?: Int
  order?: OrderUpdateOneWithoutLineItemsInput
  product?: ProductUpdateOneWithoutLineItemsInput
}

export interface OrderCreateWithoutLineItemsInput {
  customer?: CustomerCreateOneWithoutOrdersInput
}

export interface CustomerUpdateWithoutOrdersDataInput {
  first?: String
  last?: String
  street?: String
  city?: String
  state?: String
  zip?: String
  cardNum?: String
}

export interface ProductCreateInput {
  price: Int
  name: String
  lineItems?: LineItemCreateManyWithoutProductInput
  ingredients?: IngredientCreateManyInput
}

export interface UserWhereInput {
  AND?: UserWhereInput[] | UserWhereInput
  OR?: UserWhereInput[] | UserWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  email?: String
  email_not?: String
  email_in?: String[] | String
  email_not_in?: String[] | String
  email_lt?: String
  email_lte?: String
  email_gt?: String
  email_gte?: String
  email_contains?: String
  email_not_contains?: String
  email_starts_with?: String
  email_not_starts_with?: String
  email_ends_with?: String
  email_not_ends_with?: String
  password?: String
  password_not?: String
  password_in?: String[] | String
  password_not_in?: String[] | String
  password_lt?: String
  password_lte?: String
  password_gt?: String
  password_gte?: String
  password_contains?: String
  password_not_contains?: String
  password_starts_with?: String
  password_not_starts_with?: String
  password_ends_with?: String
  password_not_ends_with?: String
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  posts_every?: PostWhereInput
  posts_some?: PostWhereInput
  posts_none?: PostWhereInput
}

export interface LineItemCreateManyWithoutProductInput {
  create?: LineItemCreateWithoutProductInput[] | LineItemCreateWithoutProductInput
  connect?: LineItemWhereUniqueInput[] | LineItemWhereUniqueInput
}

export interface ProductSubscriptionWhereInput {
  AND?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput
  OR?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: ProductWhereInput
}

export interface OrderWhereInput {
  AND?: OrderWhereInput[] | OrderWhereInput
  OR?: OrderWhereInput[] | OrderWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  customer?: CustomerWhereInput
  lineItems_every?: LineItemWhereInput
  lineItems_some?: LineItemWhereInput
  lineItems_none?: LineItemWhereInput
}

export interface UserSubscriptionWhereInput {
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: UserWhereInput
}

export interface ProductWhereInput {
  AND?: ProductWhereInput[] | ProductWhereInput
  OR?: ProductWhereInput[] | ProductWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  price?: Int
  price_not?: Int
  price_in?: Int[] | Int
  price_not_in?: Int[] | Int
  price_lt?: Int
  price_lte?: Int
  price_gt?: Int
  price_gte?: Int
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  lineItems_every?: LineItemWhereInput
  lineItems_some?: LineItemWhereInput
  lineItems_none?: LineItemWhereInput
  ingredients_every?: IngredientWhereInput
  ingredients_some?: IngredientWhereInput
  ingredients_none?: IngredientWhereInput
}

export interface CustomerWhereUniqueInput {
  id?: ID_Input
}

export interface CategoryWhereInput {
  AND?: CategoryWhereInput[] | CategoryWhereInput
  OR?: CategoryWhereInput[] | CategoryWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  ingredients_every?: IngredientWhereInput
  ingredients_some?: IngredientWhereInput
  ingredients_none?: IngredientWhereInput
}

export interface IngredientWhereUniqueInput {
  id?: ID_Input
}

export interface LineItemUpsertWithoutOrderInput {
  where: LineItemWhereUniqueInput
  update: LineItemUpdateWithoutOrderDataInput
  create: LineItemCreateWithoutOrderInput
}

export interface IngredientUpdateWithoutCategoryInput {
  where: IngredientWhereUniqueInput
  data: IngredientUpdateWithoutCategoryDataInput
}

export interface PostUpdateInput {
  isPublished?: Boolean
  title?: String
  text?: String
}

export interface CategoryUpdateWithoutIngredientsDataInput {
  name?: String
}

export interface UserUpdateInput {
  email?: String
  password?: String
  name?: String
  posts?: PostUpdateManyInput
}

export interface LineItemUpsertWithoutProductInput {
  where: LineItemWhereUniqueInput
  update: LineItemUpdateWithoutProductDataInput
  create: LineItemCreateWithoutProductInput
}

export interface PostUpdateManyInput {
  create?: PostCreateInput[] | PostCreateInput
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput
}

export interface ProductUpdateInput {
  price?: Int
  name?: String
  lineItems?: LineItemUpdateManyWithoutProductInput
  ingredients?: IngredientUpdateManyInput
}

export interface CustomerUpdateInput {
  first?: String
  last?: String
  street?: String
  city?: String
  state?: String
  zip?: String
  cardNum?: String
  orders?: OrderUpdateManyWithoutCustomerInput
}

export interface OrderUpdateOneWithoutLineItemsInput {
  create?: OrderCreateWithoutLineItemsInput
  connect?: OrderWhereUniqueInput
  disconnect?: OrderWhereUniqueInput
  delete?: OrderWhereUniqueInput
  update?: OrderUpdateWithoutLineItemsInput
  upsert?: OrderUpsertWithoutLineItemsInput
}

export interface OrderUpdateManyWithoutCustomerInput {
  create?: OrderCreateWithoutCustomerInput[] | OrderCreateWithoutCustomerInput
  connect?: OrderWhereUniqueInput[] | OrderWhereUniqueInput
  disconnect?: OrderWhereUniqueInput[] | OrderWhereUniqueInput
  delete?: OrderWhereUniqueInput[] | OrderWhereUniqueInput
  update?: OrderUpdateWithoutCustomerInput[] | OrderUpdateWithoutCustomerInput
  upsert?: OrderUpsertWithoutCustomerInput[] | OrderUpsertWithoutCustomerInput
}

export interface CustomerUpdateWithoutOrdersInput {
  where: CustomerWhereUniqueInput
  data: CustomerUpdateWithoutOrdersDataInput
}

export interface OrderUpdateWithoutCustomerInput {
  where: OrderWhereUniqueInput
  data: OrderUpdateWithoutCustomerDataInput
}

export interface OrderSubscriptionWhereInput {
  AND?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput
  OR?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: OrderWhereInput
}

export interface OrderUpdateWithoutCustomerDataInput {
  lineItems?: LineItemUpdateManyWithoutOrderInput
}

export interface LineItemWhereUniqueInput {
  id?: ID_Input
}

export interface LineItemUpdateManyWithoutOrderInput {
  create?: LineItemCreateWithoutOrderInput[] | LineItemCreateWithoutOrderInput
  connect?: LineItemWhereUniqueInput[] | LineItemWhereUniqueInput
  disconnect?: LineItemWhereUniqueInput[] | LineItemWhereUniqueInput
  delete?: LineItemWhereUniqueInput[] | LineItemWhereUniqueInput
  update?: LineItemUpdateWithoutOrderInput[] | LineItemUpdateWithoutOrderInput
  upsert?: LineItemUpsertWithoutOrderInput[] | LineItemUpsertWithoutOrderInput
}

export interface CategoryUpdateInput {
  name?: String
  ingredients?: IngredientUpdateManyWithoutCategoryInput
}

export interface LineItemUpdateWithoutOrderInput {
  where: LineItemWhereUniqueInput
  data: LineItemUpdateWithoutOrderDataInput
}

export interface LineItemUpdateWithoutProductInput {
  where: LineItemWhereUniqueInput
  data: LineItemUpdateWithoutProductDataInput
}

export interface LineItemUpdateWithoutOrderDataInput {
  purchasePrice?: Int
  product?: ProductUpdateOneWithoutLineItemsInput
}

export interface CustomerUpsertWithoutOrdersInput {
  where: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutOrdersDataInput
  create: CustomerCreateWithoutOrdersInput
}

export interface PostWhereUniqueInput {
  id?: ID_Input
}

export interface IngredientUpdateManyInput {
  create?: IngredientCreateInput[] | IngredientCreateInput
  connect?: IngredientWhereUniqueInput[] | IngredientWhereUniqueInput
  disconnect?: IngredientWhereUniqueInput[] | IngredientWhereUniqueInput
  delete?: IngredientWhereUniqueInput[] | IngredientWhereUniqueInput
}

export interface ProductUpdateWithoutLineItemsDataInput {
  price?: Int
  name?: String
  ingredients?: IngredientUpdateManyInput
}

export interface ProductUpdateWithoutLineItemsInput {
  where: ProductWhereUniqueInput
  data: ProductUpdateWithoutLineItemsDataInput
}

export interface ProductUpdateOneWithoutLineItemsInput {
  create?: ProductCreateWithoutLineItemsInput
  connect?: ProductWhereUniqueInput
  disconnect?: ProductWhereUniqueInput
  delete?: ProductWhereUniqueInput
  update?: ProductUpdateWithoutLineItemsInput
  upsert?: ProductUpsertWithoutLineItemsInput
}

export interface IngredientUpsertWithoutCategoryInput {
  where: IngredientWhereUniqueInput
  update: IngredientUpdateWithoutCategoryDataInput
  create: IngredientCreateWithoutCategoryInput
}

export interface OrderUpdateWithoutLineItemsDataInput {
  customer?: CustomerUpdateOneWithoutOrdersInput
}

export interface CategoryUpdateOneWithoutIngredientsInput {
  create?: CategoryCreateWithoutIngredientsInput
  connect?: CategoryWhereUniqueInput
  disconnect?: CategoryWhereUniqueInput
  delete?: CategoryWhereUniqueInput
  update?: CategoryUpdateWithoutIngredientsInput
  upsert?: CategoryUpsertWithoutIngredientsInput
}

export interface Node {
  id: ID_Output
}

export interface CategoryPreviousValues {
  id: ID_Output
  name: String
}

export interface BatchPayload {
  count: Long
}

export interface User extends Node {
  id: ID_Output
  email: String
  password: String
  name: String
  posts?: Post[]
}

export interface Customer extends Node {
  id: ID_Output
  first: String
  last: String
  street?: String
  city?: String
  state?: String
  zip?: String
  cardNum?: String
  orders?: Order[]
}

export interface AggregateCategory {
  count: Int
}

export interface CategorySubscriptionPayload {
  mutation: MutationType
  node?: Category
  updatedFields?: String[]
  previousValues?: CategoryPreviousValues
}

export interface IngredientSubscriptionPayload {
  mutation: MutationType
  node?: Ingredient
  updatedFields?: String[]
  previousValues?: IngredientPreviousValues
}

export interface CategoryEdge {
  node: Category
  cursor: String
}

export interface CategoryConnection {
  pageInfo: PageInfo
  edges: CategoryEdge[]
  aggregate: AggregateCategory
}

export interface AggregateIngredient {
  count: Int
}

export interface IngredientConnection {
  pageInfo: PageInfo
  edges: IngredientEdge[]
  aggregate: AggregateIngredient
}

export interface Order extends Node {
  id: ID_Output
  customer?: Customer
  lineItems?: LineItem[]
}

export interface ProductEdge {
  node: Product
  cursor: String
}

export interface PostSubscriptionPayload {
  mutation: MutationType
  node?: Post
  updatedFields?: String[]
  previousValues?: PostPreviousValues
}

export interface AggregateLineItem {
  count: Int
}

export interface PostPreviousValues {
  id: ID_Output
  isPublished: Boolean
  title: String
  text: String
}

export interface LineItemConnection {
  pageInfo: PageInfo
  edges: LineItemEdge[]
  aggregate: AggregateLineItem
}

export interface IngredientPreviousValues {
  id: ID_Output
  name: String
  qty: Int
}

export interface OrderEdge {
  node: Order
  cursor: String
}

export interface UserSubscriptionPayload {
  mutation: MutationType
  node?: User
  updatedFields?: String[]
  previousValues?: UserPreviousValues
}

export interface AggregateCustomer {
  count: Int
}

export interface UserPreviousValues {
  id: ID_Output
  email: String
  password: String
  name: String
}

export interface CustomerConnection {
  pageInfo: PageInfo
  edges: CustomerEdge[]
  aggregate: AggregateCustomer
}

export interface Category extends Node {
  id: ID_Output
  name: String
  ingredients?: Ingredient[]
}

export interface UserEdge {
  node: User
  cursor: String
}

export interface CustomerSubscriptionPayload {
  mutation: MutationType
  node?: Customer
  updatedFields?: String[]
  previousValues?: CustomerPreviousValues
}

export interface AggregatePost {
  count: Int
}

export interface CustomerPreviousValues {
  id: ID_Output
  first: String
  last: String
  street?: String
  city?: String
  state?: String
  zip?: String
  cardNum?: String
}

export interface PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor?: String
  endCursor?: String
}

export interface Ingredient extends Node {
  id: ID_Output
  name: String
  category: Category
  qty: Int
}

export interface IngredientEdge {
  node: Ingredient
  cursor: String
}

export interface OrderSubscriptionPayload {
  mutation: MutationType
  node?: Order
  updatedFields?: String[]
  previousValues?: OrderPreviousValues
}

export interface ProductConnection {
  pageInfo: PageInfo
  edges: ProductEdge[]
  aggregate: AggregateProduct
}

export interface OrderPreviousValues {
  id: ID_Output
}

export interface AggregateOrder {
  count: Int
}

export interface Post extends Node {
  id: ID_Output
  isPublished: Boolean
  title: String
  text: String
}

export interface CustomerEdge {
  node: Customer
  cursor: String
}

export interface LineItemSubscriptionPayload {
  mutation: MutationType
  node?: LineItem
  updatedFields?: String[]
  previousValues?: LineItemPreviousValues
}

export interface UserConnection {
  pageInfo: PageInfo
  edges: UserEdge[]
  aggregate: AggregateUser
}

export interface LineItemPreviousValues {
  id: ID_Output
  purchasePrice: Int
}

export interface PostConnection {
  pageInfo: PageInfo
  edges: PostEdge[]
  aggregate: AggregatePost
}

export interface LineItemEdge {
  node: LineItem
  cursor: String
}

export interface LineItem extends Node {
  id: ID_Output
  order?: Order
  product?: Product
  purchasePrice: Int
}

export interface ProductPreviousValues {
  id: ID_Output
  price: Int
  name: String
}

export interface ProductSubscriptionPayload {
  mutation: MutationType
  node?: Product
  updatedFields?: String[]
  previousValues?: ProductPreviousValues
}

export interface Product extends Node {
  id: ID_Output
  lineItems?: LineItem[]
  price: Int
  name: String
  ingredients?: Ingredient[]
}

export interface OrderConnection {
  pageInfo: PageInfo
  edges: OrderEdge[]
  aggregate: AggregateOrder
}

export interface AggregateProduct {
  count: Int
}

export interface PostEdge {
  node: Post
  cursor: String
}

export interface AggregateUser {
  count: Int
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string

export type Long = string

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number
export type ID_Output = string

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number

export interface Schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

export type Query = {
  posts: (args: { where?: PostWhereInput, orderBy?: PostOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Post[]>
  users: (args: { where?: UserWhereInput, orderBy?: UserOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<User[]>
  customers: (args: { where?: CustomerWhereInput, orderBy?: CustomerOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Customer[]>
  orders: (args: { where?: OrderWhereInput, orderBy?: OrderOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Order[]>
  lineItems: (args: { where?: LineItemWhereInput, orderBy?: LineItemOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<LineItem[]>
  products: (args: { where?: ProductWhereInput, orderBy?: ProductOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Product[]>
  ingredients: (args: { where?: IngredientWhereInput, orderBy?: IngredientOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Ingredient[]>
  categories: (args: { where?: CategoryWhereInput, orderBy?: CategoryOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Category[]>
  post: (args: { where: PostWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Post | null>
  user: (args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  customer: (args: { where: CustomerWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Customer | null>
  order: (args: { where: OrderWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Order | null>
  lineItem: (args: { where: LineItemWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<LineItem | null>
  product: (args: { where: ProductWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Product | null>
  ingredient: (args: { where: IngredientWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Ingredient | null>
  category: (args: { where: CategoryWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Category | null>
  postsConnection: (args: { where?: PostWhereInput, orderBy?: PostOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<PostConnection>
  usersConnection: (args: { where?: UserWhereInput, orderBy?: UserOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<UserConnection>
  customersConnection: (args: { where?: CustomerWhereInput, orderBy?: CustomerOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<CustomerConnection>
  ordersConnection: (args: { where?: OrderWhereInput, orderBy?: OrderOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<OrderConnection>
  lineItemsConnection: (args: { where?: LineItemWhereInput, orderBy?: LineItemOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<LineItemConnection>
  productsConnection: (args: { where?: ProductWhereInput, orderBy?: ProductOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<ProductConnection>
  ingredientsConnection: (args: { where?: IngredientWhereInput, orderBy?: IngredientOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<IngredientConnection>
  categoriesConnection: (args: { where?: CategoryWhereInput, orderBy?: CategoryOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<CategoryConnection>
  node: (args: { id: ID_Output }, info?: GraphQLResolveInfo | string) => Promise<Node | null>
}

export type Mutation = {
  createPost: (args: { data: PostCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Post>
  createUser: (args: { data: UserCreateInput }, info?: GraphQLResolveInfo | string) => Promise<User>
  createCustomer: (args: { data: CustomerCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Customer>
  createOrder: (args: { data: OrderCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Order>
  createLineItem: (args: { data: LineItemCreateInput }, info?: GraphQLResolveInfo | string) => Promise<LineItem>
  createProduct: (args: { data: ProductCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Product>
  createIngredient: (args: { data: IngredientCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Ingredient>
  createCategory: (args: { data: CategoryCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Category>
  updatePost: (args: { data: PostUpdateInput, where: PostWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Post | null>
  updateUser: (args: { data: UserUpdateInput, where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  updateCustomer: (args: { data: CustomerUpdateInput, where: CustomerWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Customer | null>
  updateOrder: (args: { data: OrderUpdateInput, where: OrderWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Order | null>
  updateLineItem: (args: { data: LineItemUpdateInput, where: LineItemWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<LineItem | null>
  updateProduct: (args: { data: ProductUpdateInput, where: ProductWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Product | null>
  updateIngredient: (args: { data: IngredientUpdateInput, where: IngredientWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Ingredient | null>
  updateCategory: (args: { data: CategoryUpdateInput, where: CategoryWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Category | null>
  deletePost: (args: { where: PostWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Post | null>
  deleteUser: (args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  deleteCustomer: (args: { where: CustomerWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Customer | null>
  deleteOrder: (args: { where: OrderWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Order | null>
  deleteLineItem: (args: { where: LineItemWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<LineItem | null>
  deleteProduct: (args: { where: ProductWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Product | null>
  deleteIngredient: (args: { where: IngredientWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Ingredient | null>
  deleteCategory: (args: { where: CategoryWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Category | null>
  upsertPost: (args: { where: PostWhereUniqueInput, create: PostCreateInput, update: PostUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Post>
  upsertUser: (args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<User>
  upsertCustomer: (args: { where: CustomerWhereUniqueInput, create: CustomerCreateInput, update: CustomerUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Customer>
  upsertOrder: (args: { where: OrderWhereUniqueInput, create: OrderCreateInput, update: OrderUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Order>
  upsertLineItem: (args: { where: LineItemWhereUniqueInput, create: LineItemCreateInput, update: LineItemUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<LineItem>
  upsertProduct: (args: { where: ProductWhereUniqueInput, create: ProductCreateInput, update: ProductUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Product>
  upsertIngredient: (args: { where: IngredientWhereUniqueInput, create: IngredientCreateInput, update: IngredientUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Ingredient>
  upsertCategory: (args: { where: CategoryWhereUniqueInput, create: CategoryCreateInput, update: CategoryUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Category>
  updateManyPosts: (args: { data: PostUpdateInput, where: PostWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyUsers: (args: { data: UserUpdateInput, where: UserWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyCustomers: (args: { data: CustomerUpdateInput, where: CustomerWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyOrders: (args: { data: OrderUpdateInput, where: OrderWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyLineItems: (args: { data: LineItemUpdateInput, where: LineItemWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyProducts: (args: { data: ProductUpdateInput, where: ProductWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyIngredients: (args: { data: IngredientUpdateInput, where: IngredientWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyCategories: (args: { data: CategoryUpdateInput, where: CategoryWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyPosts: (args: { where: PostWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyUsers: (args: { where: UserWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyCustomers: (args: { where: CustomerWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyOrders: (args: { where: OrderWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyLineItems: (args: { where: LineItemWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyProducts: (args: { where: ProductWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyIngredients: (args: { where: IngredientWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyCategories: (args: { where: CategoryWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
}

export type Subscription = {
  post: (args: { where?: PostSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<PostSubscriptionPayload>>
  user: (args: { where?: UserSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<UserSubscriptionPayload>>
  customer: (args: { where?: CustomerSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<CustomerSubscriptionPayload>>
  order: (args: { where?: OrderSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<OrderSubscriptionPayload>>
  lineItem: (args: { where?: LineItemSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<LineItemSubscriptionPayload>>
  product: (args: { where?: ProductSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<ProductSubscriptionPayload>>
  ingredient: (args: { where?: IngredientSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<IngredientSubscriptionPayload>>
  category: (args: { where?: CategorySubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<CategorySubscriptionPayload>>
}

export class Prisma extends BasePrisma {
  
  constructor({ endpoint, secret, fragmentReplacements, debug }: BasePrismaOptions) {
    super({ typeDefs, endpoint, secret, fragmentReplacements, debug });
  }

  exists = {
    Post: (where: PostWhereInput): Promise<boolean> => super.existsDelegate('query', 'posts', { where }, {}, '{ id }'),
    User: (where: UserWhereInput): Promise<boolean> => super.existsDelegate('query', 'users', { where }, {}, '{ id }'),
    Customer: (where: CustomerWhereInput): Promise<boolean> => super.existsDelegate('query', 'customers', { where }, {}, '{ id }'),
    Order: (where: OrderWhereInput): Promise<boolean> => super.existsDelegate('query', 'orders', { where }, {}, '{ id }'),
    LineItem: (where: LineItemWhereInput): Promise<boolean> => super.existsDelegate('query', 'lineItems', { where }, {}, '{ id }'),
    Product: (where: ProductWhereInput): Promise<boolean> => super.existsDelegate('query', 'products', { where }, {}, '{ id }'),
    Ingredient: (where: IngredientWhereInput): Promise<boolean> => super.existsDelegate('query', 'ingredients', { where }, {}, '{ id }'),
    Category: (where: CategoryWhereInput): Promise<boolean> => super.existsDelegate('query', 'categories', { where }, {}, '{ id }')
  }

  query: Query = {
    posts: (args, info): Promise<Post[]> => super.delegate('query', 'posts', args, {}, info),
    users: (args, info): Promise<User[]> => super.delegate('query', 'users', args, {}, info),
    customers: (args, info): Promise<Customer[]> => super.delegate('query', 'customers', args, {}, info),
    orders: (args, info): Promise<Order[]> => super.delegate('query', 'orders', args, {}, info),
    lineItems: (args, info): Promise<LineItem[]> => super.delegate('query', 'lineItems', args, {}, info),
    products: (args, info): Promise<Product[]> => super.delegate('query', 'products', args, {}, info),
    ingredients: (args, info): Promise<Ingredient[]> => super.delegate('query', 'ingredients', args, {}, info),
    categories: (args, info): Promise<Category[]> => super.delegate('query', 'categories', args, {}, info),
    post: (args, info): Promise<Post | null> => super.delegate('query', 'post', args, {}, info),
    user: (args, info): Promise<User | null> => super.delegate('query', 'user', args, {}, info),
    customer: (args, info): Promise<Customer | null> => super.delegate('query', 'customer', args, {}, info),
    order: (args, info): Promise<Order | null> => super.delegate('query', 'order', args, {}, info),
    lineItem: (args, info): Promise<LineItem | null> => super.delegate('query', 'lineItem', args, {}, info),
    product: (args, info): Promise<Product | null> => super.delegate('query', 'product', args, {}, info),
    ingredient: (args, info): Promise<Ingredient | null> => super.delegate('query', 'ingredient', args, {}, info),
    category: (args, info): Promise<Category | null> => super.delegate('query', 'category', args, {}, info),
    postsConnection: (args, info): Promise<PostConnection> => super.delegate('query', 'postsConnection', args, {}, info),
    usersConnection: (args, info): Promise<UserConnection> => super.delegate('query', 'usersConnection', args, {}, info),
    customersConnection: (args, info): Promise<CustomerConnection> => super.delegate('query', 'customersConnection', args, {}, info),
    ordersConnection: (args, info): Promise<OrderConnection> => super.delegate('query', 'ordersConnection', args, {}, info),
    lineItemsConnection: (args, info): Promise<LineItemConnection> => super.delegate('query', 'lineItemsConnection', args, {}, info),
    productsConnection: (args, info): Promise<ProductConnection> => super.delegate('query', 'productsConnection', args, {}, info),
    ingredientsConnection: (args, info): Promise<IngredientConnection> => super.delegate('query', 'ingredientsConnection', args, {}, info),
    categoriesConnection: (args, info): Promise<CategoryConnection> => super.delegate('query', 'categoriesConnection', args, {}, info),
    node: (args, info): Promise<Node | null> => super.delegate('query', 'node', args, {}, info)
  }

  mutation: Mutation = {
    createPost: (args, info): Promise<Post> => super.delegate('mutation', 'createPost', args, {}, info),
    createUser: (args, info): Promise<User> => super.delegate('mutation', 'createUser', args, {}, info),
    createCustomer: (args, info): Promise<Customer> => super.delegate('mutation', 'createCustomer', args, {}, info),
    createOrder: (args, info): Promise<Order> => super.delegate('mutation', 'createOrder', args, {}, info),
    createLineItem: (args, info): Promise<LineItem> => super.delegate('mutation', 'createLineItem', args, {}, info),
    createProduct: (args, info): Promise<Product> => super.delegate('mutation', 'createProduct', args, {}, info),
    createIngredient: (args, info): Promise<Ingredient> => super.delegate('mutation', 'createIngredient', args, {}, info),
    createCategory: (args, info): Promise<Category> => super.delegate('mutation', 'createCategory', args, {}, info),
    updatePost: (args, info): Promise<Post | null> => super.delegate('mutation', 'updatePost', args, {}, info),
    updateUser: (args, info): Promise<User | null> => super.delegate('mutation', 'updateUser', args, {}, info),
    updateCustomer: (args, info): Promise<Customer | null> => super.delegate('mutation', 'updateCustomer', args, {}, info),
    updateOrder: (args, info): Promise<Order | null> => super.delegate('mutation', 'updateOrder', args, {}, info),
    updateLineItem: (args, info): Promise<LineItem | null> => super.delegate('mutation', 'updateLineItem', args, {}, info),
    updateProduct: (args, info): Promise<Product | null> => super.delegate('mutation', 'updateProduct', args, {}, info),
    updateIngredient: (args, info): Promise<Ingredient | null> => super.delegate('mutation', 'updateIngredient', args, {}, info),
    updateCategory: (args, info): Promise<Category | null> => super.delegate('mutation', 'updateCategory', args, {}, info),
    deletePost: (args, info): Promise<Post | null> => super.delegate('mutation', 'deletePost', args, {}, info),
    deleteUser: (args, info): Promise<User | null> => super.delegate('mutation', 'deleteUser', args, {}, info),
    deleteCustomer: (args, info): Promise<Customer | null> => super.delegate('mutation', 'deleteCustomer', args, {}, info),
    deleteOrder: (args, info): Promise<Order | null> => super.delegate('mutation', 'deleteOrder', args, {}, info),
    deleteLineItem: (args, info): Promise<LineItem | null> => super.delegate('mutation', 'deleteLineItem', args, {}, info),
    deleteProduct: (args, info): Promise<Product | null> => super.delegate('mutation', 'deleteProduct', args, {}, info),
    deleteIngredient: (args, info): Promise<Ingredient | null> => super.delegate('mutation', 'deleteIngredient', args, {}, info),
    deleteCategory: (args, info): Promise<Category | null> => super.delegate('mutation', 'deleteCategory', args, {}, info),
    upsertPost: (args, info): Promise<Post> => super.delegate('mutation', 'upsertPost', args, {}, info),
    upsertUser: (args, info): Promise<User> => super.delegate('mutation', 'upsertUser', args, {}, info),
    upsertCustomer: (args, info): Promise<Customer> => super.delegate('mutation', 'upsertCustomer', args, {}, info),
    upsertOrder: (args, info): Promise<Order> => super.delegate('mutation', 'upsertOrder', args, {}, info),
    upsertLineItem: (args, info): Promise<LineItem> => super.delegate('mutation', 'upsertLineItem', args, {}, info),
    upsertProduct: (args, info): Promise<Product> => super.delegate('mutation', 'upsertProduct', args, {}, info),
    upsertIngredient: (args, info): Promise<Ingredient> => super.delegate('mutation', 'upsertIngredient', args, {}, info),
    upsertCategory: (args, info): Promise<Category> => super.delegate('mutation', 'upsertCategory', args, {}, info),
    updateManyPosts: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyPosts', args, {}, info),
    updateManyUsers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyUsers', args, {}, info),
    updateManyCustomers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyCustomers', args, {}, info),
    updateManyOrders: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyOrders', args, {}, info),
    updateManyLineItems: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyLineItems', args, {}, info),
    updateManyProducts: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyProducts', args, {}, info),
    updateManyIngredients: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyIngredients', args, {}, info),
    updateManyCategories: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyCategories', args, {}, info),
    deleteManyPosts: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyPosts', args, {}, info),
    deleteManyUsers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyUsers', args, {}, info),
    deleteManyCustomers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyCustomers', args, {}, info),
    deleteManyOrders: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyOrders', args, {}, info),
    deleteManyLineItems: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyLineItems', args, {}, info),
    deleteManyProducts: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyProducts', args, {}, info),
    deleteManyIngredients: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyIngredients', args, {}, info),
    deleteManyCategories: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyCategories', args, {}, info)
  }

  subscription: Subscription = {
    post: (args, infoOrQuery): Promise<AsyncIterator<PostSubscriptionPayload>> => super.delegateSubscription('post', args, {}, infoOrQuery),
    user: (args, infoOrQuery): Promise<AsyncIterator<UserSubscriptionPayload>> => super.delegateSubscription('user', args, {}, infoOrQuery),
    customer: (args, infoOrQuery): Promise<AsyncIterator<CustomerSubscriptionPayload>> => super.delegateSubscription('customer', args, {}, infoOrQuery),
    order: (args, infoOrQuery): Promise<AsyncIterator<OrderSubscriptionPayload>> => super.delegateSubscription('order', args, {}, infoOrQuery),
    lineItem: (args, infoOrQuery): Promise<AsyncIterator<LineItemSubscriptionPayload>> => super.delegateSubscription('lineItem', args, {}, infoOrQuery),
    product: (args, infoOrQuery): Promise<AsyncIterator<ProductSubscriptionPayload>> => super.delegateSubscription('product', args, {}, infoOrQuery),
    ingredient: (args, infoOrQuery): Promise<AsyncIterator<IngredientSubscriptionPayload>> => super.delegateSubscription('ingredient', args, {}, infoOrQuery),
    category: (args, infoOrQuery): Promise<AsyncIterator<CategorySubscriptionPayload>> => super.delegateSubscription('category', args, {}, infoOrQuery)
  }
}