# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Category implements Node {
  id: ID!
  name: String!
  ingredients(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient!]
}

type Customer implements Node {
  id: ID!
  first: String!
  last: String!
  street: String
  city: String
  state: String
  zip: String
  cardNum: String
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  createdAt: DateTime!
}

type Ingredient implements Node {
  id: ID!
  name: String!
  category(where: CategoryWhereInput): Category!
  qty: Int!
}

type LineItem implements Node {
  id: ID!
  order(where: OrderWhereInput): Order
  product(where: ProductWhereInput): Product
  qty: Int
  purchasePrice: Int
  instructions: String
}

type Order implements Node {
  id: ID!
  customer(where: CustomerWhereInput): Customer!
  lineItems(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LineItem!]
  paid: Boolean
  prepared: Boolean
  preparedAt: DateTime
  type: StatusEnum
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
  author(where: UserWhereInput): User!
}

type Product implements Node {
  id: ID!
  lineItems(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LineItem!]
  price: Int!
  name: String!
  ingredients(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient!]
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}


#
# Other Types
#

type AggregateCategory {
  count: Int!
}

type AggregateCustomer {
  count: Int!
}

type AggregateIngredient {
  count: Int!
}

type AggregateLineItem {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type CategoryConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  name: String!
  ingredients: IngredientCreateManyWithoutCategoryInput
}

input CategoryCreateOneWithoutIngredientsInput {
  create: CategoryCreateWithoutIngredientsInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutIngredientsInput {
  name: String!
}

"""
An edge in a connection.
"""
type CategoryEdge {
  """
  The item at the end of the edge.
  """
  node: Category!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CategoryPreviousValues {
  id: ID!
  name: String!
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CategorySubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CategorySubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
}

input CategoryUpdateInput {
  name: String
  ingredients: IngredientUpdateManyWithoutCategoryInput
}

input CategoryUpdateOneWithoutIngredientsInput {
  create: CategoryCreateWithoutIngredientsInput
  connect: CategoryWhereUniqueInput
  disconnect: CategoryWhereUniqueInput
  delete: CategoryWhereUniqueInput
  update: CategoryUpdateWithoutIngredientsInput
  upsert: CategoryUpsertWithoutIngredientsInput
}

input CategoryUpdateWithoutIngredientsDataInput {
  name: String
}

input CategoryUpdateWithoutIngredientsInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateWithoutIngredientsDataInput!
}

input CategoryUpsertWithoutIngredientsInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateWithoutIngredientsDataInput!
  create: CategoryCreateWithoutIngredientsInput!
}

input CategoryWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CategoryWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CategoryWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  ingredients_every: IngredientWhereInput
  ingredients_some: IngredientWhereInput
  ingredients_none: IngredientWhereInput
}

input CategoryWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type CustomerConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [CustomerEdge]!
  aggregate: AggregateCustomer!
}

input CustomerCreateInput {
  first: String!
  last: String!
  street: String
  city: String
  state: String
  zip: String
  cardNum: String
  orders: OrderCreateManyWithoutCustomerInput
}

input CustomerCreateOneWithoutOrdersInput {
  create: CustomerCreateWithoutOrdersInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutOrdersInput {
  first: String!
  last: String!
  street: String
  city: String
  state: String
  zip: String
  cardNum: String
}

"""
An edge in a connection.
"""
type CustomerEdge {
  """
  The item at the end of the edge.
  """
  node: Customer!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CustomerOrderByInput {
  id_ASC
  id_DESC
  first_ASC
  first_DESC
  last_ASC
  last_DESC
  street_ASC
  street_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zip_ASC
  zip_DESC
  cardNum_ASC
  cardNum_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CustomerPreviousValues {
  id: ID!
  first: String!
  last: String!
  street: String
  city: String
  state: String
  zip: String
  cardNum: String
  createdAt: DateTime!
}

type CustomerSubscriptionPayload {
  mutation: MutationType!
  node: Customer
  updatedFields: [String!]
  previousValues: CustomerPreviousValues
}

input CustomerSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CustomerSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CustomerSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CustomerWhereInput
}

input CustomerUpdateInput {
  first: String
  last: String
  street: String
  city: String
  state: String
  zip: String
  cardNum: String
  orders: OrderUpdateManyWithoutCustomerInput
}

input CustomerUpdateOneWithoutOrdersInput {
  create: CustomerCreateWithoutOrdersInput
  connect: CustomerWhereUniqueInput
  disconnect: CustomerWhereUniqueInput
  delete: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutOrdersInput
  upsert: CustomerUpsertWithoutOrdersInput
}

input CustomerUpdateWithoutOrdersDataInput {
  first: String
  last: String
  street: String
  city: String
  state: String
  zip: String
  cardNum: String
}

input CustomerUpdateWithoutOrdersInput {
  where: CustomerWhereUniqueInput!
  data: CustomerUpdateWithoutOrdersDataInput!
}

input CustomerUpsertWithoutOrdersInput {
  where: CustomerWhereUniqueInput!
  update: CustomerUpdateWithoutOrdersDataInput!
  create: CustomerCreateWithoutOrdersInput!
}

input CustomerWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CustomerWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CustomerWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  first: String
  """
  All values that are not equal to given value.
  """
  first_not: String
  """
  All values that are contained in given list.
  """
  first_in: [String!]
  """
  All values that are not contained in given list.
  """
  first_not_in: [String!]
  """
  All values less than the given value.
  """
  first_lt: String
  """
  All values less than or equal the given value.
  """
  first_lte: String
  """
  All values greater than the given value.
  """
  first_gt: String
  """
  All values greater than or equal the given value.
  """
  first_gte: String
  """
  All values containing the given string.
  """
  first_contains: String
  """
  All values not containing the given string.
  """
  first_not_contains: String
  """
  All values starting with the given string.
  """
  first_starts_with: String
  """
  All values not starting with the given string.
  """
  first_not_starts_with: String
  """
  All values ending with the given string.
  """
  first_ends_with: String
  """
  All values not ending with the given string.
  """
  first_not_ends_with: String
  last: String
  """
  All values that are not equal to given value.
  """
  last_not: String
  """
  All values that are contained in given list.
  """
  last_in: [String!]
  """
  All values that are not contained in given list.
  """
  last_not_in: [String!]
  """
  All values less than the given value.
  """
  last_lt: String
  """
  All values less than or equal the given value.
  """
  last_lte: String
  """
  All values greater than the given value.
  """
  last_gt: String
  """
  All values greater than or equal the given value.
  """
  last_gte: String
  """
  All values containing the given string.
  """
  last_contains: String
  """
  All values not containing the given string.
  """
  last_not_contains: String
  """
  All values starting with the given string.
  """
  last_starts_with: String
  """
  All values not starting with the given string.
  """
  last_not_starts_with: String
  """
  All values ending with the given string.
  """
  last_ends_with: String
  """
  All values not ending with the given string.
  """
  last_not_ends_with: String
  street: String
  """
  All values that are not equal to given value.
  """
  street_not: String
  """
  All values that are contained in given list.
  """
  street_in: [String!]
  """
  All values that are not contained in given list.
  """
  street_not_in: [String!]
  """
  All values less than the given value.
  """
  street_lt: String
  """
  All values less than or equal the given value.
  """
  street_lte: String
  """
  All values greater than the given value.
  """
  street_gt: String
  """
  All values greater than or equal the given value.
  """
  street_gte: String
  """
  All values containing the given string.
  """
  street_contains: String
  """
  All values not containing the given string.
  """
  street_not_contains: String
  """
  All values starting with the given string.
  """
  street_starts_with: String
  """
  All values not starting with the given string.
  """
  street_not_starts_with: String
  """
  All values ending with the given string.
  """
  street_ends_with: String
  """
  All values not ending with the given string.
  """
  street_not_ends_with: String
  city: String
  """
  All values that are not equal to given value.
  """
  city_not: String
  """
  All values that are contained in given list.
  """
  city_in: [String!]
  """
  All values that are not contained in given list.
  """
  city_not_in: [String!]
  """
  All values less than the given value.
  """
  city_lt: String
  """
  All values less than or equal the given value.
  """
  city_lte: String
  """
  All values greater than the given value.
  """
  city_gt: String
  """
  All values greater than or equal the given value.
  """
  city_gte: String
  """
  All values containing the given string.
  """
  city_contains: String
  """
  All values not containing the given string.
  """
  city_not_contains: String
  """
  All values starting with the given string.
  """
  city_starts_with: String
  """
  All values not starting with the given string.
  """
  city_not_starts_with: String
  """
  All values ending with the given string.
  """
  city_ends_with: String
  """
  All values not ending with the given string.
  """
  city_not_ends_with: String
  state: String
  """
  All values that are not equal to given value.
  """
  state_not: String
  """
  All values that are contained in given list.
  """
  state_in: [String!]
  """
  All values that are not contained in given list.
  """
  state_not_in: [String!]
  """
  All values less than the given value.
  """
  state_lt: String
  """
  All values less than or equal the given value.
  """
  state_lte: String
  """
  All values greater than the given value.
  """
  state_gt: String
  """
  All values greater than or equal the given value.
  """
  state_gte: String
  """
  All values containing the given string.
  """
  state_contains: String
  """
  All values not containing the given string.
  """
  state_not_contains: String
  """
  All values starting with the given string.
  """
  state_starts_with: String
  """
  All values not starting with the given string.
  """
  state_not_starts_with: String
  """
  All values ending with the given string.
  """
  state_ends_with: String
  """
  All values not ending with the given string.
  """
  state_not_ends_with: String
  zip: String
  """
  All values that are not equal to given value.
  """
  zip_not: String
  """
  All values that are contained in given list.
  """
  zip_in: [String!]
  """
  All values that are not contained in given list.
  """
  zip_not_in: [String!]
  """
  All values less than the given value.
  """
  zip_lt: String
  """
  All values less than or equal the given value.
  """
  zip_lte: String
  """
  All values greater than the given value.
  """
  zip_gt: String
  """
  All values greater than or equal the given value.
  """
  zip_gte: String
  """
  All values containing the given string.
  """
  zip_contains: String
  """
  All values not containing the given string.
  """
  zip_not_contains: String
  """
  All values starting with the given string.
  """
  zip_starts_with: String
  """
  All values not starting with the given string.
  """
  zip_not_starts_with: String
  """
  All values ending with the given string.
  """
  zip_ends_with: String
  """
  All values not ending with the given string.
  """
  zip_not_ends_with: String
  cardNum: String
  """
  All values that are not equal to given value.
  """
  cardNum_not: String
  """
  All values that are contained in given list.
  """
  cardNum_in: [String!]
  """
  All values that are not contained in given list.
  """
  cardNum_not_in: [String!]
  """
  All values less than the given value.
  """
  cardNum_lt: String
  """
  All values less than or equal the given value.
  """
  cardNum_lte: String
  """
  All values greater than the given value.
  """
  cardNum_gt: String
  """
  All values greater than or equal the given value.
  """
  cardNum_gte: String
  """
  All values containing the given string.
  """
  cardNum_contains: String
  """
  All values not containing the given string.
  """
  cardNum_not_contains: String
  """
  All values starting with the given string.
  """
  cardNum_starts_with: String
  """
  All values not starting with the given string.
  """
  cardNum_not_starts_with: String
  """
  All values ending with the given string.
  """
  cardNum_ends_with: String
  """
  All values not ending with the given string.
  """
  cardNum_not_ends_with: String
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
}

input CustomerWhereUniqueInput {
  id: ID
}

scalar DateTime

"""
A connection to a list of items.
"""
type IngredientConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [IngredientEdge]!
  aggregate: AggregateIngredient!
}

input IngredientCreateInput {
  name: String!
  qty: Int!
  category: CategoryCreateOneWithoutIngredientsInput!
}

input IngredientCreateManyInput {
  create: [IngredientCreateInput!]
  connect: [IngredientWhereUniqueInput!]
}

input IngredientCreateManyWithoutCategoryInput {
  create: [IngredientCreateWithoutCategoryInput!]
  connect: [IngredientWhereUniqueInput!]
}

input IngredientCreateWithoutCategoryInput {
  name: String!
  qty: Int!
}

"""
An edge in a connection.
"""
type IngredientEdge {
  """
  The item at the end of the edge.
  """
  node: Ingredient!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum IngredientOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  qty_ASC
  qty_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type IngredientPreviousValues {
  id: ID!
  name: String!
  qty: Int!
}

type IngredientSubscriptionPayload {
  mutation: MutationType!
  node: Ingredient
  updatedFields: [String!]
  previousValues: IngredientPreviousValues
}

input IngredientSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [IngredientSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [IngredientSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: IngredientWhereInput
}

input IngredientUpdateInput {
  name: String
  qty: Int
  category: CategoryUpdateOneWithoutIngredientsInput
}

input IngredientUpdateManyInput {
  create: [IngredientCreateInput!]
  connect: [IngredientWhereUniqueInput!]
  disconnect: [IngredientWhereUniqueInput!]
  delete: [IngredientWhereUniqueInput!]
}

input IngredientUpdateManyWithoutCategoryInput {
  create: [IngredientCreateWithoutCategoryInput!]
  connect: [IngredientWhereUniqueInput!]
  disconnect: [IngredientWhereUniqueInput!]
  delete: [IngredientWhereUniqueInput!]
  update: [IngredientUpdateWithoutCategoryInput!]
  upsert: [IngredientUpsertWithoutCategoryInput!]
}

input IngredientUpdateWithoutCategoryDataInput {
  name: String
  qty: Int
}

input IngredientUpdateWithoutCategoryInput {
  where: IngredientWhereUniqueInput!
  data: IngredientUpdateWithoutCategoryDataInput!
}

input IngredientUpsertWithoutCategoryInput {
  where: IngredientWhereUniqueInput!
  update: IngredientUpdateWithoutCategoryDataInput!
  create: IngredientCreateWithoutCategoryInput!
}

input IngredientWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [IngredientWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [IngredientWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  qty: Int
  """
  All values that are not equal to given value.
  """
  qty_not: Int
  """
  All values that are contained in given list.
  """
  qty_in: [Int!]
  """
  All values that are not contained in given list.
  """
  qty_not_in: [Int!]
  """
  All values less than the given value.
  """
  qty_lt: Int
  """
  All values less than or equal the given value.
  """
  qty_lte: Int
  """
  All values greater than the given value.
  """
  qty_gt: Int
  """
  All values greater than or equal the given value.
  """
  qty_gte: Int
  category: CategoryWhereInput
}

input IngredientWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type LineItemConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [LineItemEdge]!
  aggregate: AggregateLineItem!
}

input LineItemCreateInput {
  qty: Int
  purchasePrice: Int
  instructions: String
  order: OrderCreateOneWithoutLineItemsInput
  product: ProductCreateOneWithoutLineItemsInput
}

input LineItemCreateManyWithoutOrderInput {
  create: [LineItemCreateWithoutOrderInput!]
  connect: [LineItemWhereUniqueInput!]
}

input LineItemCreateManyWithoutProductInput {
  create: [LineItemCreateWithoutProductInput!]
  connect: [LineItemWhereUniqueInput!]
}

input LineItemCreateWithoutOrderInput {
  qty: Int
  purchasePrice: Int
  instructions: String
  product: ProductCreateOneWithoutLineItemsInput
}

input LineItemCreateWithoutProductInput {
  qty: Int
  purchasePrice: Int
  instructions: String
  order: OrderCreateOneWithoutLineItemsInput
}

"""
An edge in a connection.
"""
type LineItemEdge {
  """
  The item at the end of the edge.
  """
  node: LineItem!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum LineItemOrderByInput {
  id_ASC
  id_DESC
  qty_ASC
  qty_DESC
  purchasePrice_ASC
  purchasePrice_DESC
  instructions_ASC
  instructions_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LineItemPreviousValues {
  id: ID!
  qty: Int
  purchasePrice: Int
  instructions: String
}

type LineItemSubscriptionPayload {
  mutation: MutationType!
  node: LineItem
  updatedFields: [String!]
  previousValues: LineItemPreviousValues
}

input LineItemSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [LineItemSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [LineItemSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LineItemWhereInput
}

input LineItemUpdateInput {
  qty: Int
  purchasePrice: Int
  instructions: String
  order: OrderUpdateOneWithoutLineItemsInput
  product: ProductUpdateOneWithoutLineItemsInput
}

input LineItemUpdateManyWithoutOrderInput {
  create: [LineItemCreateWithoutOrderInput!]
  connect: [LineItemWhereUniqueInput!]
  disconnect: [LineItemWhereUniqueInput!]
  delete: [LineItemWhereUniqueInput!]
  update: [LineItemUpdateWithoutOrderInput!]
  upsert: [LineItemUpsertWithoutOrderInput!]
}

input LineItemUpdateManyWithoutProductInput {
  create: [LineItemCreateWithoutProductInput!]
  connect: [LineItemWhereUniqueInput!]
  disconnect: [LineItemWhereUniqueInput!]
  delete: [LineItemWhereUniqueInput!]
  update: [LineItemUpdateWithoutProductInput!]
  upsert: [LineItemUpsertWithoutProductInput!]
}

input LineItemUpdateWithoutOrderDataInput {
  qty: Int
  purchasePrice: Int
  instructions: String
  product: ProductUpdateOneWithoutLineItemsInput
}

input LineItemUpdateWithoutOrderInput {
  where: LineItemWhereUniqueInput!
  data: LineItemUpdateWithoutOrderDataInput!
}

input LineItemUpdateWithoutProductDataInput {
  qty: Int
  purchasePrice: Int
  instructions: String
  order: OrderUpdateOneWithoutLineItemsInput
}

input LineItemUpdateWithoutProductInput {
  where: LineItemWhereUniqueInput!
  data: LineItemUpdateWithoutProductDataInput!
}

input LineItemUpsertWithoutOrderInput {
  where: LineItemWhereUniqueInput!
  update: LineItemUpdateWithoutOrderDataInput!
  create: LineItemCreateWithoutOrderInput!
}

input LineItemUpsertWithoutProductInput {
  where: LineItemWhereUniqueInput!
  update: LineItemUpdateWithoutProductDataInput!
  create: LineItemCreateWithoutProductInput!
}

input LineItemWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [LineItemWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [LineItemWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  qty: Int
  """
  All values that are not equal to given value.
  """
  qty_not: Int
  """
  All values that are contained in given list.
  """
  qty_in: [Int!]
  """
  All values that are not contained in given list.
  """
  qty_not_in: [Int!]
  """
  All values less than the given value.
  """
  qty_lt: Int
  """
  All values less than or equal the given value.
  """
  qty_lte: Int
  """
  All values greater than the given value.
  """
  qty_gt: Int
  """
  All values greater than or equal the given value.
  """
  qty_gte: Int
  purchasePrice: Int
  """
  All values that are not equal to given value.
  """
  purchasePrice_not: Int
  """
  All values that are contained in given list.
  """
  purchasePrice_in: [Int!]
  """
  All values that are not contained in given list.
  """
  purchasePrice_not_in: [Int!]
  """
  All values less than the given value.
  """
  purchasePrice_lt: Int
  """
  All values less than or equal the given value.
  """
  purchasePrice_lte: Int
  """
  All values greater than the given value.
  """
  purchasePrice_gt: Int
  """
  All values greater than or equal the given value.
  """
  purchasePrice_gte: Int
  instructions: String
  """
  All values that are not equal to given value.
  """
  instructions_not: String
  """
  All values that are contained in given list.
  """
  instructions_in: [String!]
  """
  All values that are not contained in given list.
  """
  instructions_not_in: [String!]
  """
  All values less than the given value.
  """
  instructions_lt: String
  """
  All values less than or equal the given value.
  """
  instructions_lte: String
  """
  All values greater than the given value.
  """
  instructions_gt: String
  """
  All values greater than or equal the given value.
  """
  instructions_gte: String
  """
  All values containing the given string.
  """
  instructions_contains: String
  """
  All values not containing the given string.
  """
  instructions_not_contains: String
  """
  All values starting with the given string.
  """
  instructions_starts_with: String
  """
  All values not starting with the given string.
  """
  instructions_not_starts_with: String
  """
  All values ending with the given string.
  """
  instructions_ends_with: String
  """
  All values not ending with the given string.
  """
  instructions_not_ends_with: String
  order: OrderWhereInput
  product: ProductWhereInput
}

input LineItemWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createUser(data: UserCreateInput!): User!
  createCustomer(data: CustomerCreateInput!): Customer!
  createOrder(data: OrderCreateInput!): Order!
  createLineItem(data: LineItemCreateInput!): LineItem!
  createProduct(data: ProductCreateInput!): Product!
  createIngredient(data: IngredientCreateInput!): Ingredient!
  createCategory(data: CategoryCreateInput!): Category!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateLineItem(data: LineItemUpdateInput!, where: LineItemWhereUniqueInput!): LineItem
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateIngredient(data: IngredientUpdateInput!, where: IngredientWhereUniqueInput!): Ingredient
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  deletePost(where: PostWhereUniqueInput!): Post
  deleteUser(where: UserWhereUniqueInput!): User
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteLineItem(where: LineItemWhereUniqueInput!): LineItem
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteIngredient(where: IngredientWhereUniqueInput!): Ingredient
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertCustomer(where: CustomerWhereUniqueInput!, create: CustomerCreateInput!, update: CustomerUpdateInput!): Customer!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  upsertLineItem(where: LineItemWhereUniqueInput!, create: LineItemCreateInput!, update: LineItemUpdateInput!): LineItem!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  upsertIngredient(where: IngredientWhereUniqueInput!, create: IngredientCreateInput!, update: IngredientUpdateInput!): Ingredient!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyCustomers(data: CustomerUpdateInput!, where: CustomerWhereInput!): BatchPayload!
  updateManyOrders(data: OrderUpdateInput!, where: OrderWhereInput!): BatchPayload!
  updateManyLineItems(data: LineItemUpdateInput!, where: LineItemWhereInput!): BatchPayload!
  updateManyProducts(data: ProductUpdateInput!, where: ProductWhereInput!): BatchPayload!
  updateManyIngredients(data: IngredientUpdateInput!, where: IngredientWhereInput!): BatchPayload!
  updateManyCategories(data: CategoryUpdateInput!, where: CategoryWhereInput!): BatchPayload!
  deleteManyPosts(where: PostWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyCustomers(where: CustomerWhereInput!): BatchPayload!
  deleteManyOrders(where: OrderWhereInput!): BatchPayload!
  deleteManyLineItems(where: LineItemWhereInput!): BatchPayload!
  deleteManyProducts(where: ProductWhereInput!): BatchPayload!
  deleteManyIngredients(where: IngredientWhereInput!): BatchPayload!
  deleteManyCategories(where: CategoryWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
A connection to a list of items.
"""
type OrderConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  paid: Boolean
  prepared: Boolean
  preparedAt: DateTime
  type: StatusEnum
  customer: CustomerCreateOneWithoutOrdersInput!
  lineItems: LineItemCreateManyWithoutOrderInput
}

input OrderCreateManyWithoutCustomerInput {
  create: [OrderCreateWithoutCustomerInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateOneWithoutLineItemsInput {
  create: OrderCreateWithoutLineItemsInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutCustomerInput {
  paid: Boolean
  prepared: Boolean
  preparedAt: DateTime
  type: StatusEnum
  lineItems: LineItemCreateManyWithoutOrderInput
}

input OrderCreateWithoutLineItemsInput {
  paid: Boolean
  prepared: Boolean
  preparedAt: DateTime
  type: StatusEnum
  customer: CustomerCreateOneWithoutOrdersInput!
}

"""
An edge in a connection.
"""
type OrderEdge {
  """
  The item at the end of the edge.
  """
  node: Order!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  paid_ASC
  paid_DESC
  prepared_ASC
  prepared_DESC
  preparedAt_ASC
  preparedAt_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrderPreviousValues {
  id: ID!
  paid: Boolean
  prepared: Boolean
  preparedAt: DateTime
  type: StatusEnum
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [OrderSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [OrderSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
}

input OrderUpdateInput {
  paid: Boolean
  prepared: Boolean
  preparedAt: DateTime
  type: StatusEnum
  customer: CustomerUpdateOneWithoutOrdersInput
  lineItems: LineItemUpdateManyWithoutOrderInput
}

input OrderUpdateManyWithoutCustomerInput {
  create: [OrderCreateWithoutCustomerInput!]
  connect: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithoutCustomerInput!]
  upsert: [OrderUpsertWithoutCustomerInput!]
}

input OrderUpdateOneWithoutLineItemsInput {
  create: OrderCreateWithoutLineItemsInput
  connect: OrderWhereUniqueInput
  disconnect: OrderWhereUniqueInput
  delete: OrderWhereUniqueInput
  update: OrderUpdateWithoutLineItemsInput
  upsert: OrderUpsertWithoutLineItemsInput
}

input OrderUpdateWithoutCustomerDataInput {
  paid: Boolean
  prepared: Boolean
  preparedAt: DateTime
  type: StatusEnum
  lineItems: LineItemUpdateManyWithoutOrderInput
}

input OrderUpdateWithoutCustomerInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutCustomerDataInput!
}

input OrderUpdateWithoutLineItemsDataInput {
  paid: Boolean
  prepared: Boolean
  preparedAt: DateTime
  type: StatusEnum
  customer: CustomerUpdateOneWithoutOrdersInput
}

input OrderUpdateWithoutLineItemsInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutLineItemsDataInput!
}

input OrderUpsertWithoutCustomerInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutCustomerDataInput!
  create: OrderCreateWithoutCustomerInput!
}

input OrderUpsertWithoutLineItemsInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutLineItemsDataInput!
  create: OrderCreateWithoutLineItemsInput!
}

input OrderWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [OrderWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [OrderWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  paid: Boolean
  """
  All values that are not equal to given value.
  """
  paid_not: Boolean
  prepared: Boolean
  """
  All values that are not equal to given value.
  """
  prepared_not: Boolean
  preparedAt: DateTime
  """
  All values that are not equal to given value.
  """
  preparedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  preparedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  preparedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  preparedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  preparedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  preparedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  preparedAt_gte: DateTime
  type: StatusEnum
  """
  All values that are not equal to given value.
  """
  type_not: StatusEnum
  """
  All values that are contained in given list.
  """
  type_in: [StatusEnum!]
  """
  All values that are not contained in given list.
  """
  type_not_in: [StatusEnum!]
  customer: CustomerWhereInput
  lineItems_every: LineItemWhereInput
  lineItems_some: LineItemWhereInput
  lineItems_none: LineItemWhereInput
}

input OrderWhereUniqueInput {
  id: ID
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A connection to a list of items.
"""
type PostConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
  author: UserCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  isPublished: Boolean
  title: String!
  text: String!
}

"""
An edge in a connection.
"""
type PostEdge {
  """
  The item at the end of the edge.
  """
  node: Post!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PostSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
  author: UserUpdateOneWithoutPostsInput
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithoutAuthorInput!]
  upsert: [PostUpsertWithoutAuthorInput!]
}

input PostUpdateWithoutAuthorDataInput {
  isPublished: Boolean
  title: String
  text: String
}

input PostUpdateWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PostWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  isPublished: Boolean
  """
  All values that are not equal to given value.
  """
  isPublished_not: Boolean
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  text: String
  """
  All values that are not equal to given value.
  """
  text_not: String
  """
  All values that are contained in given list.
  """
  text_in: [String!]
  """
  All values that are not contained in given list.
  """
  text_not_in: [String!]
  """
  All values less than the given value.
  """
  text_lt: String
  """
  All values less than or equal the given value.
  """
  text_lte: String
  """
  All values greater than the given value.
  """
  text_gt: String
  """
  All values greater than or equal the given value.
  """
  text_gte: String
  """
  All values containing the given string.
  """
  text_contains: String
  """
  All values not containing the given string.
  """
  text_not_contains: String
  """
  All values starting with the given string.
  """
  text_starts_with: String
  """
  All values not starting with the given string.
  """
  text_not_starts_with: String
  """
  All values ending with the given string.
  """
  text_ends_with: String
  """
  All values not ending with the given string.
  """
  text_not_ends_with: String
  author: UserWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type ProductConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  price: Int!
  name: String!
  lineItems: LineItemCreateManyWithoutProductInput
  ingredients: IngredientCreateManyInput
}

input ProductCreateOneWithoutLineItemsInput {
  create: ProductCreateWithoutLineItemsInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutLineItemsInput {
  price: Int!
  name: String!
  ingredients: IngredientCreateManyInput
}

"""
An edge in a connection.
"""
type ProductEdge {
  """
  The item at the end of the edge.
  """
  node: Product!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  price_ASC
  price_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProductPreviousValues {
  id: ID!
  price: Int!
  name: String!
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ProductSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
}

input ProductUpdateInput {
  price: Int
  name: String
  lineItems: LineItemUpdateManyWithoutProductInput
  ingredients: IngredientUpdateManyInput
}

input ProductUpdateOneWithoutLineItemsInput {
  create: ProductCreateWithoutLineItemsInput
  connect: ProductWhereUniqueInput
  disconnect: ProductWhereUniqueInput
  delete: ProductWhereUniqueInput
  update: ProductUpdateWithoutLineItemsInput
  upsert: ProductUpsertWithoutLineItemsInput
}

input ProductUpdateWithoutLineItemsDataInput {
  price: Int
  name: String
  ingredients: IngredientUpdateManyInput
}

input ProductUpdateWithoutLineItemsInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutLineItemsDataInput!
}

input ProductUpsertWithoutLineItemsInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutLineItemsDataInput!
  create: ProductCreateWithoutLineItemsInput!
}

input ProductWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ProductWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  price: Int
  """
  All values that are not equal to given value.
  """
  price_not: Int
  """
  All values that are contained in given list.
  """
  price_in: [Int!]
  """
  All values that are not contained in given list.
  """
  price_not_in: [Int!]
  """
  All values less than the given value.
  """
  price_lt: Int
  """
  All values less than or equal the given value.
  """
  price_lte: Int
  """
  All values greater than the given value.
  """
  price_gt: Int
  """
  All values greater than or equal the given value.
  """
  price_gte: Int
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  lineItems_every: LineItemWhereInput
  lineItems_some: LineItemWhereInput
  lineItems_none: LineItemWhereInput
  ingredients_every: IngredientWhereInput
  ingredients_some: IngredientWhereInput
  ingredients_none: IngredientWhereInput
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  customers(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Customer]!
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  lineItems(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LineItem]!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  ingredients(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient]!
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  post(where: PostWhereUniqueInput!): Post
  user(where: UserWhereUniqueInput!): User
  customer(where: CustomerWhereUniqueInput!): Customer
  order(where: OrderWhereUniqueInput!): Order
  lineItem(where: LineItemWhereUniqueInput!): LineItem
  product(where: ProductWhereUniqueInput!): Product
  ingredient(where: IngredientWhereUniqueInput!): Ingredient
  category(where: CategoryWhereUniqueInput!): Category
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  customersConnection(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomerConnection!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  lineItemsConnection(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LineItemConnection!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  ingredientsConnection(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IngredientConnection!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

enum StatusEnum {
  PICKUP
  DELIVERY
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  customer(where: CustomerSubscriptionWhereInput): CustomerSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  lineItem(where: LineItemSubscriptionWhereInput): LineItemSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  ingredient(where: IngredientSubscriptionWhereInput): IngredientSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  email: String!
  password: String!
  name: String!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutPostsDataInput {
  email: String
  password: String
  name: String
}

input UserUpdateWithoutPostsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPostsDataInput!
}

input UserUpsertWithoutPostsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  password: String
  """
  All values that are not equal to given value.
  """
  password_not: String
  """
  All values that are contained in given list.
  """
  password_in: [String!]
  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]
  """
  All values less than the given value.
  """
  password_lt: String
  """
  All values less than or equal the given value.
  """
  password_lte: String
  """
  All values greater than the given value.
  """
  password_gt: String
  """
  All values greater than or equal the given value.
  """
  password_gte: String
  """
  All values containing the given string.
  """
  password_contains: String
  """
  All values not containing the given string.
  """
  password_not_contains: String
  """
  All values starting with the given string.
  """
  password_starts_with: String
  """
  All values not starting with the given string.
  """
  password_not_starts_with: String
  """
  All values ending with the given string.
  """
  password_ends_with: String
  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
